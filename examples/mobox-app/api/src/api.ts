/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * mobox
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost".replace(/\/+$/, "");
const portableFetch = fetch;

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AccessDto
 */
export interface AccessDto {
    /**
     * 
     * @type {number}
     * @memberof AccessDto
     */
    accountId: number;
    /**
     * 
     * @type {number}
     * @memberof AccessDto
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof AccessDto
     */
    movieId: number;
}

/**
 * 
 * @export
 * @interface AccountDto
 */
export interface AccountDto {
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    familyName: string;
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    givenName: string;
    /**
     * 
     * @type {number}
     * @memberof AccountDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    nickname: string;
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    pictureLink?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    role: AccountDto.RoleEnum;
}

/**
 * @export
 * @namespace AccountDto
 */
export namespace AccountDto {
    /**
     * @export
     * @enum {string}
     */
    export enum RoleEnum {
        ADMIN = <any> 'ADMIN',
        USER = <any> 'USER'
    }
}

/**
 * 
 * @export
 * @interface GenreDto
 */
export interface GenreDto {
    /**
     * 
     * @type {number}
     * @memberof GenreDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof GenreDto
     */
    name: string;
}

/**
 * 
 * @export
 * @interface MovieDto
 */
export interface MovieDto {
    /**
     * 
     * @type {boolean}
     * @memberof MovieDto
     */
    adult: boolean;
    /**
     * 
     * @type {string}
     * @memberof MovieDto
     */
    backdrop?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDto
     */
    filename: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MovieDto
     */
    genres: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof MovieDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MovieDto
     */
    overview: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDto
     */
    poster?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDto
     */
    posterSmall?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDto
     */
    releaseDate?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDto
     */
    size: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDto
     */
    title: string;
}

/**
 * 
 * @export
 * @interface PageDtoMovieDto
 */
export interface PageDtoMovieDto {
    /**
     * 
     * @type {Array<MovieDto>}
     * @memberof PageDtoMovieDto
     */
    content: Array<MovieDto>;
    /**
     * 
     * @type {number}
     * @memberof PageDtoMovieDto
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof PageDtoMovieDto
     */
    totalPages: number;
    /**
     * 
     * @type {number}
     * @memberof PageDtoMovieDto
     */
    totalResults: number;
}


/**
 * AccessResourcesApi - fetch parameter creator
 * @export
 */
export const AccessResourcesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createAccess
         * @param {number} accountId accountId
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessUsingPOST(accountId: number, movieId: number, options: any = {}): FetchArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling createAccessUsingPOST.');
            }
            // verify required parameter 'movieId' is not null or undefined
            if (movieId === null || movieId === undefined) {
                throw new RequiredError('movieId','Required parameter movieId was null or undefined when calling createAccessUsingPOST.');
            }
            const localVarPath = `/api/v1/account/{accountId}/access/{movieId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"movieId"}}`, encodeURIComponent(String(movieId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteAccess
         * @param {number} accountId accountId
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessUsingDELETE(accountId: number, movieId: number, options: any = {}): FetchArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling deleteAccessUsingDELETE.');
            }
            // verify required parameter 'movieId' is not null or undefined
            if (movieId === null || movieId === undefined) {
                throw new RequiredError('movieId','Required parameter movieId was null or undefined when calling deleteAccessUsingDELETE.');
            }
            const localVarPath = `/api/v1/account/{accountId}/access/{movieId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"movieId"}}`, encodeURIComponent(String(movieId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listAccessesByAccount
         * @param {number} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessesByAccountUsingGET(accountId: number, options: any = {}): FetchArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling listAccessesByAccountUsingGET.');
            }
            const localVarPath = `/api/v1/account/{accountId}/access`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listAccessesByMovie
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessesByMovieUsingGET(movieId: number, options: any = {}): FetchArgs {
            // verify required parameter 'movieId' is not null or undefined
            if (movieId === null || movieId === undefined) {
                throw new RequiredError('movieId','Required parameter movieId was null or undefined when calling listAccessesByMovieUsingGET.');
            }
            const localVarPath = `/api/v1/movie/{movieId}/access`
                .replace(`{${"movieId"}}`, encodeURIComponent(String(movieId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessResourcesApi - functional programming interface
 * @export
 */
export const AccessResourcesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createAccess
         * @param {number} accountId accountId
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessUsingPOST(accountId: number, movieId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccessResourcesApiFetchParamCreator(configuration).createAccessUsingPOST(accountId, movieId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary deleteAccess
         * @param {number} accountId accountId
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessUsingDELETE(accountId: number, movieId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccessResourcesApiFetchParamCreator(configuration).deleteAccessUsingDELETE(accountId, movieId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary listAccessesByAccount
         * @param {number} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessesByAccountUsingGET(accountId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = AccessResourcesApiFetchParamCreator(configuration).listAccessesByAccountUsingGET(accountId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary listAccessesByMovie
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessesByMovieUsingGET(movieId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<AccessDto>> {
            const localVarFetchArgs = AccessResourcesApiFetchParamCreator(configuration).listAccessesByMovieUsingGET(movieId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AccessResourcesApi - factory interface
 * @export
 */
export const AccessResourcesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary createAccess
         * @param {number} accountId accountId
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessUsingPOST(accountId: number, movieId: number, options?: any) {
            return AccessResourcesApiFp(configuration).createAccessUsingPOST(accountId, movieId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary deleteAccess
         * @param {number} accountId accountId
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessUsingDELETE(accountId: number, movieId: number, options?: any) {
            return AccessResourcesApiFp(configuration).deleteAccessUsingDELETE(accountId, movieId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary listAccessesByAccount
         * @param {number} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessesByAccountUsingGET(accountId: number, options?: any) {
            return AccessResourcesApiFp(configuration).listAccessesByAccountUsingGET(accountId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary listAccessesByMovie
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessesByMovieUsingGET(movieId: number, options?: any) {
            return AccessResourcesApiFp(configuration).listAccessesByMovieUsingGET(movieId, options)(fetch, basePath);
        },
    };
};

/**
 * AccessResourcesApi - object-oriented interface
 * @export
 * @class AccessResourcesApi
 * @extends {BaseAPI}
 */
export class AccessResourcesApi extends BaseAPI {
    /**
     * 
     * @summary createAccess
     * @param {number} accountId accountId
     * @param {number} movieId movieId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessResourcesApi
     */
    public createAccessUsingPOST(accountId: number, movieId: number, options?: any) {
        return AccessResourcesApiFp(this.configuration).createAccessUsingPOST(accountId, movieId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary deleteAccess
     * @param {number} accountId accountId
     * @param {number} movieId movieId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessResourcesApi
     */
    public deleteAccessUsingDELETE(accountId: number, movieId: number, options?: any) {
        return AccessResourcesApiFp(this.configuration).deleteAccessUsingDELETE(accountId, movieId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary listAccessesByAccount
     * @param {number} accountId accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessResourcesApi
     */
    public listAccessesByAccountUsingGET(accountId: number, options?: any) {
        return AccessResourcesApiFp(this.configuration).listAccessesByAccountUsingGET(accountId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary listAccessesByMovie
     * @param {number} movieId movieId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessResourcesApi
     */
    public listAccessesByMovieUsingGET(movieId: number, options?: any) {
        return AccessResourcesApiFp(this.configuration).listAccessesByMovieUsingGET(movieId, options)(this.fetch, this.basePath);
    }

}

/**
 * AccountResourcesApi - fetch parameter creator
 * @export
 */
export const AccountResourcesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAccountById
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountByIdUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAccountByIdUsingGET.');
            }
            const localVarPath = `/api/v1/account/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/account/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listAccounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountsUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary setAccountStatus
         * @param {boolean} active active
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAccountStatusUsingPOST(active: boolean, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'active' is not null or undefined
            if (active === null || active === undefined) {
                throw new RequiredError('active','Required parameter active was null or undefined when calling setAccountStatusUsingPOST.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setAccountStatusUsingPOST.');
            }
            const localVarPath = `/api/v1/account/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountResourcesApi - functional programming interface
 * @export
 */
export const AccountResourcesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAccountById
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountByIdUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountDto> {
            const localVarFetchArgs = AccountResourcesApiFetchParamCreator(configuration).getAccountByIdUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary getAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountDto> {
            const localVarFetchArgs = AccountResourcesApiFetchParamCreator(configuration).getAccountUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary listAccounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountsUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<AccountDto>> {
            const localVarFetchArgs = AccountResourcesApiFetchParamCreator(configuration).listAccountsUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary setAccountStatus
         * @param {boolean} active active
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAccountStatusUsingPOST(active: boolean, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccountResourcesApiFetchParamCreator(configuration).setAccountStatusUsingPOST(active, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AccountResourcesApi - factory interface
 * @export
 */
export const AccountResourcesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary getAccountById
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountByIdUsingGET(id: number, options?: any) {
            return AccountResourcesApiFp(configuration).getAccountByIdUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountUsingGET(options?: any) {
            return AccountResourcesApiFp(configuration).getAccountUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary listAccounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountsUsingGET(options?: any) {
            return AccountResourcesApiFp(configuration).listAccountsUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary setAccountStatus
         * @param {boolean} active active
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAccountStatusUsingPOST(active: boolean, id: number, options?: any) {
            return AccountResourcesApiFp(configuration).setAccountStatusUsingPOST(active, id, options)(fetch, basePath);
        },
    };
};

/**
 * AccountResourcesApi - object-oriented interface
 * @export
 * @class AccountResourcesApi
 * @extends {BaseAPI}
 */
export class AccountResourcesApi extends BaseAPI {
    /**
     * 
     * @summary getAccountById
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourcesApi
     */
    public getAccountByIdUsingGET(id: number, options?: any) {
        return AccountResourcesApiFp(this.configuration).getAccountByIdUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary getAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourcesApi
     */
    public getAccountUsingGET(options?: any) {
        return AccountResourcesApiFp(this.configuration).getAccountUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary listAccounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourcesApi
     */
    public listAccountsUsingGET(options?: any) {
        return AccountResourcesApiFp(this.configuration).listAccountsUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary setAccountStatus
     * @param {boolean} active active
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourcesApi
     */
    public setAccountStatusUsingPOST(active: boolean, id: number, options?: any) {
        return AccountResourcesApiFp(this.configuration).setAccountStatusUsingPOST(active, id, options)(this.fetch, this.basePath);
    }

}

/**
 * GenreResourcesApi - fetch parameter creator
 * @export
 */
export const GenreResourcesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary listGenres
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGenresUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/genre`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GenreResourcesApi - functional programming interface
 * @export
 */
export const GenreResourcesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary listGenres
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGenresUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<GenreDto>> {
            const localVarFetchArgs = GenreResourcesApiFetchParamCreator(configuration).listGenresUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * GenreResourcesApi - factory interface
 * @export
 */
export const GenreResourcesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary listGenres
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGenresUsingGET(options?: any) {
            return GenreResourcesApiFp(configuration).listGenresUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * GenreResourcesApi - object-oriented interface
 * @export
 * @class GenreResourcesApi
 * @extends {BaseAPI}
 */
export class GenreResourcesApi extends BaseAPI {
    /**
     * 
     * @summary listGenres
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenreResourcesApi
     */
    public listGenresUsingGET(options?: any) {
        return GenreResourcesApiFp(this.configuration).listGenresUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * MovieResourcesApi - fetch parameter creator
 * @export
 */
export const MovieResourcesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteMovie
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMovieUsingDELETE(movieId: number, options: any = {}): FetchArgs {
            // verify required parameter 'movieId' is not null or undefined
            if (movieId === null || movieId === undefined) {
                throw new RequiredError('movieId','Required parameter movieId was null or undefined when calling deleteMovieUsingDELETE.');
            }
            const localVarPath = `/api/v1/movie/{movieId}`
                .replace(`{${"movieId"}}`, encodeURIComponent(String(movieId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteMovies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMoviesUsingDELETE(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/movie`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary download
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadUsingGET(movieId: number, options: any = {}): FetchArgs {
            // verify required parameter 'movieId' is not null or undefined
            if (movieId === null || movieId === undefined) {
                throw new RequiredError('movieId','Required parameter movieId was null or undefined when calling downloadUsingGET.');
            }
            const localVarPath = `/api/v1/movie/{movieId}/download`
                .replace(`{${"movieId"}}`, encodeURIComponent(String(movieId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listMovies
         * @param {number} [genreId] genreId
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {string} [sortBy] sortBy
         * @param {'ASC' | 'DESC'} [sortType] sortType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoviesUsingGET(genreId?: number, page?: number, pageSize?: number, sortBy?: string, sortType?: 'ASC' | 'DESC', options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/movie`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (genreId !== undefined) {
                localVarQueryParameter['genreId'] = genreId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sortType'] = sortType;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MovieResourcesApi - functional programming interface
 * @export
 */
export const MovieResourcesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteMovie
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMovieUsingDELETE(movieId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MovieResourcesApiFetchParamCreator(configuration).deleteMovieUsingDELETE(movieId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary deleteMovies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMoviesUsingDELETE(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MovieResourcesApiFetchParamCreator(configuration).deleteMoviesUsingDELETE(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary download
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadUsingGET(movieId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MovieResourcesApiFetchParamCreator(configuration).downloadUsingGET(movieId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary listMovies
         * @param {number} [genreId] genreId
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {string} [sortBy] sortBy
         * @param {'ASC' | 'DESC'} [sortType] sortType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoviesUsingGET(genreId?: number, page?: number, pageSize?: number, sortBy?: string, sortType?: 'ASC' | 'DESC', options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PageDtoMovieDto> {
            const localVarFetchArgs = MovieResourcesApiFetchParamCreator(configuration).listMoviesUsingGET(genreId, page, pageSize, sortBy, sortType, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MovieResourcesApi - factory interface
 * @export
 */
export const MovieResourcesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary deleteMovie
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMovieUsingDELETE(movieId: number, options?: any) {
            return MovieResourcesApiFp(configuration).deleteMovieUsingDELETE(movieId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary deleteMovies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMoviesUsingDELETE(options?: any) {
            return MovieResourcesApiFp(configuration).deleteMoviesUsingDELETE(options)(fetch, basePath);
        },
        /**
         * 
         * @summary download
         * @param {number} movieId movieId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadUsingGET(movieId: number, options?: any) {
            return MovieResourcesApiFp(configuration).downloadUsingGET(movieId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary listMovies
         * @param {number} [genreId] genreId
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {string} [sortBy] sortBy
         * @param {'ASC' | 'DESC'} [sortType] sortType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMoviesUsingGET(genreId?: number, page?: number, pageSize?: number, sortBy?: string, sortType?: 'ASC' | 'DESC', options?: any) {
            return MovieResourcesApiFp(configuration).listMoviesUsingGET(genreId, page, pageSize, sortBy, sortType, options)(fetch, basePath);
        },
    };
};

/**
 * MovieResourcesApi - object-oriented interface
 * @export
 * @class MovieResourcesApi
 * @extends {BaseAPI}
 */
export class MovieResourcesApi extends BaseAPI {
    /**
     * 
     * @summary deleteMovie
     * @param {number} movieId movieId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieResourcesApi
     */
    public deleteMovieUsingDELETE(movieId: number, options?: any) {
        return MovieResourcesApiFp(this.configuration).deleteMovieUsingDELETE(movieId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary deleteMovies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieResourcesApi
     */
    public deleteMoviesUsingDELETE(options?: any) {
        return MovieResourcesApiFp(this.configuration).deleteMoviesUsingDELETE(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary download
     * @param {number} movieId movieId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieResourcesApi
     */
    public downloadUsingGET(movieId: number, options?: any) {
        return MovieResourcesApiFp(this.configuration).downloadUsingGET(movieId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary listMovies
     * @param {number} [genreId] genreId
     * @param {number} [page] page
     * @param {number} [pageSize] pageSize
     * @param {string} [sortBy] sortBy
     * @param {'ASC' | 'DESC'} [sortType] sortType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieResourcesApi
     */
    public listMoviesUsingGET(genreId?: number, page?: number, pageSize?: number, sortBy?: string, sortType?: 'ASC' | 'DESC', options?: any) {
        return MovieResourcesApiFp(this.configuration).listMoviesUsingGET(genreId, page, pageSize, sortBy, sortType, options)(this.fetch, this.basePath);
    }

}

